"use strict";(self.webpackChunkcomm_docs=self.webpackChunkcomm_docs||[]).push([[972],{2630:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return c}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={sidebar_position:1,id:"devenvironment_mac",title:"Setting up the Dev Environment (macOS)"},s="Setting up the Dev Environment",d={unversionedId:"devenvironment_mac",id:"devenvironment_mac",isDocsHomePage:!1,title:"Setting up the Dev Environment (macOS)",description:"Requirements",source:"@site/docs/dev_environment.md",sourceDirName:".",slug:"/devenvironment_mac",permalink:"/docs/devenvironment_mac",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/dev_environment.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"devenvironment_mac",title:"Setting up the Dev Environment (macOS)"},sidebar:"docs",next:{title:"Setting up the Dev Environment (Linux)",permalink:"/docs/devenvironment_linux"}},p=[{value:"Requirements",id:"requirements",children:[],level:2},{value:"Prerequisites",id:"prerequisites",children:[{value:"Xcode",id:"xcode",children:[],level:3},{value:"Homebrew",id:"homebrew",children:[],level:3},{value:"Node",id:"node",children:[],level:3},{value:"PHP (macOS 12.x.x)",id:"php-macos-12xx",children:[],level:3},{value:"Yarn",id:"yarn",children:[],level:3},{value:"Watchman",id:"watchman",children:[],level:3},{value:"nvm",id:"nvm",children:[],level:3},{value:"MySQL",id:"mysql",children:[],level:3},{value:"Redis",id:"redis",children:[],level:3},{value:"CocoaPods",id:"cocoapods",children:[],level:3},{value:"Reactotron",id:"reactotron",children:[],level:3},{value:"Flipper",id:"flipper",children:[{value:"Flipper plugins",id:"flipper-plugins",children:[],level:4}],level:3},{value:"idb",id:"idb",children:[],level:3},{value:"React Dev Tools Chrome extension",id:"react-dev-tools-chrome-extension",children:[],level:3},{value:"Redux Dev Tools Chrome extension",id:"redux-dev-tools-chrome-extension",children:[],level:3},{value:"JDK",id:"jdk",children:[],level:3},{value:"Android Studio",id:"android-studio",children:[{value:"Android SDK",id:"android-sdk",children:[],level:4},{value:"Enable Android CLI commands",id:"enable-android-cli-commands",children:[],level:4}],level:3},{value:"Arcanist",id:"arcanist",children:[],level:3}],level:2},{value:"Docker",id:"docker",children:[],level:2},{value:"Configuration",id:"configuration",children:[{value:"Apache",id:"apache",children:[],level:3},{value:"MySQL",id:"mysql-1",children:[],level:3},{value:"PHPMyAdmin",id:"phpmyadmin",children:[],level:3},{value:"Android emulator",id:"android-emulator",children:[],level:3}],level:2},{value:"Git repo",id:"git-repo",children:[{value:"Clone from GitHub",id:"clone-from-github",children:[],level:3},{value:"URLs",id:"urls",children:[],level:3},{value:"MySQL",id:"mysql-2",children:[],level:3},{value:"Phabricator",id:"phabricator",children:[],level:3}],level:2},{value:"Development",id:"development",children:[{value:"Flow typechecker",id:"flow-typechecker",children:[],level:3},{value:"Running web app",id:"running-web-app",children:[],level:3},{value:"Running landing page",id:"running-landing-page",children:[],level:3},{value:"Running server",id:"running-server",children:[],level:3},{value:"Running iOS",id:"running-ios",children:[],level:3},{value:"Running Android",id:"running-android",children:[],level:3},{value:"Codegen",id:"codegen",children:[{value:"Codegen for JSI",id:"codegen-for-jsi",children:[],level:4},{value:"Codegen for gRPC",id:"codegen-for-grpc",children:[],level:4}],level:3}],level:2},{value:"Debugging",id:"debugging",children:[{value:"React Developer Tools",id:"react-developer-tools",children:[],level:3},{value:"Redux Developer Tools",id:"redux-developer-tools",children:[],level:3},{value:"Debugging JavaScript",id:"debugging-javascript",children:[],level:3}],level:2},{value:"Working with Phabricator",id:"working-with-phabricator",children:[{value:"Creating a new diff",id:"creating-a-new-diff",children:[],level:3},{value:"Updating a diff",id:"updating-a-diff",children:[],level:3},{value:"Committing a diff",id:"committing-a-diff",children:[],level:3},{value:"Creating a Herald rule",id:"creating-a-herald-rule",children:[],level:3},{value:"Final notes",id:"final-notes",children:[],level:3}],level:2}],u={toc:p};function c(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"setting-up-the-dev-environment"},"Setting up the Dev Environment"),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"Please note that our dev environment currently only works on macOS and Linux."),(0,i.kt)("p",null,"For the (sparse) Linux instructions ",(0,i.kt)("a",{parentName:"p",href:"devenvironment_linux"},"head to the Linux configuration steps"),"."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Why not Windows? (click to expand)"),(0,i.kt)("p",null,"It\u2019s primarily because Apple only supports iOS development using macOS. It\u2019s true that we could support web, server, and Android development on other operating systems, but because of the Apple requirement, all of our active developers currently run macOS. We\u2019d very much welcome a PR to build out support on Windows!")),(0,i.kt)("p",null,"Unfortunately the dev environment is overall pretty heavy. You\u2019ll ideally want a machine with at least 32 GiB of RAM, although 16 GiB should suffice."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("h3",{id:"xcode"},"Xcode"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://apps.apple.com/us/app/xcode/id497799835"},"Install Xcode"),", or if you have it already, update it to the latest version."),(0,i.kt)("p",null,"After installation of XCode, open it up. If you are prompted, follow the instructions to install any \u201cAdditional Required Components\u201d."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Make sure that the \u201cCommand Line Tools\u201d are installed. Go to Xcode \u2192 Preferences \u2192 Locations, and then install the tools by selecting the most recent version from the Command Line Tools dropdown."))),(0,i.kt)("h3",{id:"homebrew"},"Homebrew"),(0,i.kt)("p",null,"Install ",(0,i.kt)("a",{parentName:"p",href:"https://brew.sh/"},"Homebrew"),", a package manager for macOS."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n')),(0,i.kt)("h3",{id:"node"},"Node"),(0,i.kt)("p",null,"Next, install ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/"},"Node")," using Homebrew."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install node; brew upgrade node\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The reason we use both ",(0,i.kt)("inlineCode",{parentName:"p"},"install")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"upgrade")," is that there\u2019s no single Homebrew command equivalent to \u201cinstall if not installed, and upgrade if already installed\u201d."))),(0,i.kt)("h3",{id:"php-macos-12xx"},"PHP (macOS 12.x.x)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.php.net"},"PHP")," is needed for both Arcanist and PHPMyAdmin. As of macOS 12 (Monterrey), PHP is no longer bundled with the OS and needs to be installed via Homebrew."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install php; brew upgrade php\n\n")),(0,i.kt)("p",null,"The installer may require you to run ",(0,i.kt)("inlineCode",{parentName:"p"},"xcode-select --install")," if it has not been executed yet. "),(0,i.kt)("p",null,"After installation of PHP, consider copying the following message, which contains useful paths for use in the Apache setup below. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"To enable PHP in Apache add the following to httpd.conf and restart Apache:\n    LoadModule php_module /opt/homebrew/opt/php/lib/httpd/modules/libphp.so\n\n    <FilesMatch \\.php$>\n        SetHandler application/x-httpd-php\n    </FilesMatch>\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("h2",{parentName:"div",id:"alternatives-to-php-m1-macs"},"Alternatives to PHP (M1 macs)"),(0,i.kt)("p",{parentName:"div"},"PHP is only important for PHPMyAdmin, which handles webclient MySQL administration. "),(0,i.kt)("p",{parentName:"div"},"Some of the team on M1 macs ran into issues regarding PHP and Apache, and ended up using ",(0,i.kt)("a",{parentName:"p",href:"https://tableplus.com/"},"TablePlus")," instead. TablePlus isn't dependent upon PHP and appears to work out of the box, in which case PHP installation is not required. "))),(0,i.kt)("h3",{id:"yarn"},"Yarn"),(0,i.kt)("p",null,"We use the ",(0,i.kt)("a",{parentName:"p",href:"https://yarnpkg.com/"},"Yarn")," package manager for JavaScript in our repo."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install yarn; brew upgrade yarn\n")),(0,i.kt)("h3",{id:"watchman"},"Watchman"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://facebook.github.io/watchman/"},"Watchman")," is a tool from Facebook used in the React Native dev environment to watch for changes to your filesystem."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install watchman; brew upgrade watchman\n")),(0,i.kt)("h3",{id:"nvm"},"nvm"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nvm-sh/nvm"},"Node Version Manager")," is a tool that helps us make sure we use the same version of Node on our server between prod and dev environments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install nvm; brew upgrade nvm\n")),(0,i.kt)("p",null,"After installing, Homebrew will print out some instructions under the Caveats section of its output. It will ask you to do two things: ",(0,i.kt)("inlineCode",{parentName:"p"},"mkdir ~/.nvm"),", and to add some lines to your ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_profile")," (or desired shell configuration file). We recommend that you append ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-use")," to the line that loads nvm, so that you continue to use your Homebrew-sourced Node distribution by default:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'export NVM_DIR="$HOME/.nvm"\n[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh" --no-use # This loads nvm\n[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion\n')),(0,i.kt)("p",null,"Now either close and reopen your terminal window or re-source your shell configuration file in order to load nvm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"source ~/.bash_profile\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We are currently using Node v16.9.0, which may not be the default used by a fresh nvm install. "),(0,i.kt)("p",{parentName:"div"},"Consider running the following nvm command to peg the default Node version: "),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"nvm alias default 16.9.0\n")))),(0,i.kt)("h3",{id:"mysql"},"MySQL"),(0,i.kt)("p",null,"(For now) we\u2019re using ",(0,i.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/5.7/en/"},"MySQL 5.7")," as the primary server-side database. We have plans to change this soon, but for now, install MySQL 5.7 using Homebrew."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install mysql@5.7; brew upgrade mysql@5.7\n")),(0,i.kt)("p",null,"Next we\u2019ll configure MySQL to start when your computer boots using ",(0,i.kt)("inlineCode",{parentName:"p"},"brew services"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew tap homebrew/services\nbrew services start mysql@5.7\n")),(0,i.kt)("p",null,"We\u2019ll also want to link MySQL so that you can run CLI commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew link mysql@5.7 --force\n")),(0,i.kt)("p",null,"Finally, you should set up a root password for your local MySQL instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mysqladmin -u root password\n")),(0,i.kt)("h3",{id:"redis"},"Redis"),(0,i.kt)("p",null,"We use ",(0,i.kt)("a",{parentName:"p",href:"https://redis.io/"},"Redis")," on the server side as a message broker."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install redis; brew upgrade redis\n")),(0,i.kt)("p",null,"We\u2019ll set it up to start on boot with ",(0,i.kt)("inlineCode",{parentName:"p"},"brew services"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew services start redis\n")),(0,i.kt)("h3",{id:"cocoapods"},"CocoaPods"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://cocoapods.org/"},"CocoaPods")," is a dependency management system for iOS development. React Native uses it to manage native modules."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install cocoapods; brew upgrade cocoapods\n")),(0,i.kt)("h3",{id:"reactotron"},"Reactotron"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/infinitered/reactotron"},"Reactotron")," is an event tracker and logger that can be used to aid in debugging on React Native."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install reactotron; brew upgrade reactotron\n")),(0,i.kt)("h3",{id:"flipper"},"Flipper"),(0,i.kt)("p",null,"Flipper is a debugging tool for mobile applications from Facebook. We use it for JavaScript debugging using the Hermes runtime, and also use several plugins such as the React Dev Tools. You can download the latest version of Flipper for MacOS ",(0,i.kt)("a",{parentName:"p",href:"https://www.facebook.com/fbflipper/public/mac"},"here"),"."),(0,i.kt)("h4",{id:"flipper-plugins"},"Flipper plugins"),(0,i.kt)("p",null,"Flipper has a plugin system that allows teams to integrate additional debugging tools into Flipper. We currently only use one plugin, which is for monitoring Redux state."),(0,i.kt)("p",null,'To install it, open Flipper and go to View \u2192 Manage Plugins. Type in "redux-debugger" and install the Flipper plugin with that name.'),(0,i.kt)("h3",{id:"idb"},"idb"),(0,i.kt)("p",null,"Flipper relies on Facebook\u2019s ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/facebook/idb"},"idb tool")," to debug iOS apps running on your device. We\u2019ll need to install it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew tap facebook/fb\nbrew install idb-companion\npip3 install --user --upgrade fb-idb\n")),(0,i.kt)("p",null,"Since we run ",(0,i.kt)("inlineCode",{parentName:"p"},"pip3 install")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"--user")," instead of running it with ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"idb")," executable gets installed in your userdir. For me, running MacOS with Python 3.9, it got installed in ",(0,i.kt)("inlineCode",{parentName:"p"},"~/Library/Python/3.9/bin/idb"),". For Flipper to be able to talk to ",(0,i.kt)("inlineCode",{parentName:"p"},"idb"),", you\u2019ll need to set the IDB Binary Location in the Flipper Settings (File \u2192 Preferences)."),(0,i.kt)("p",null,"If you have trouble getting Flipper to work with a physical iOS device, it may be due to Python weirdness. The above steps have been tested with Python 3.9 sourced from Homebrew. Let @ashoat know if you have any trouble!"),(0,i.kt)("h3",{id:"react-dev-tools-chrome-extension"},"React Dev Tools Chrome extension"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"},"React Dev Tools Chrome extension")," lets you inspect the React component tree for web applications in Chrome. You can install it by navigating ",(0,i.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"},"here")," on Chrome."),(0,i.kt)("h3",{id:"redux-dev-tools-chrome-extension"},"Redux Dev Tools Chrome extension"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en"},"Redux Dev Tools Chrome extension")," lets you watch for Redux actions and inspect the Redux store state, both for web applications in Chrome, but also for our native applications using the \u201cRemote DevTools\u201d functionality. To install it, navigate ",(0,i.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd"},"here")," on Chrome."),(0,i.kt)("h3",{id:"jdk"},"JDK"),(0,i.kt)("p",null,"We\u2019ll need the Java Development Kit for Android development."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install adoptopenjdk/openjdk/adoptopenjdk11; brew upgrade adoptopenjdk/openjdk/adoptopenjdk11\n")),(0,i.kt)("p",null,"We should also make sure to set up the ",(0,i.kt)("inlineCode",{parentName:"p"},"$JAVA_HOME")," environment variable to point to our new JDK. Append the following line to your ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_profile")," (or desired shell configuration file):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"export JAVA_HOME=$(/usr/libexec/java_home)\n")),(0,i.kt)("h3",{id:"android-studio"},"Android Studio"),(0,i.kt)("p",null,"Start by downloading and installing ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/studio/index.html"},"Android Studio"),". When prompted to choose an installation type, select \u201cCustom\u201d. Make sure you check the boxes for the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Android SDK")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Android SDK Platform")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Performance (Intel \xae HAXM)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Android Virtual Device"))),(0,i.kt)("h4",{id:"android-sdk"},"Android SDK"),(0,i.kt)("p",null,"Android Studio installs the latest Android SDK by default, but since React Native uses the Android 10 SDK specifically, we\u2019ll need to install it using Android Studio\u2019s SDK Manager. You can access the SDK Manager from the \u201cWelcome to Android Studio\u201d screen that pops up when you first open the application, under \u201cConfigure\u201d. If you already have a project open, you can access it from Tools \u2192 SDK Manager."),(0,i.kt)("p",null,"Once you have the SDK Manager open, select the \u201cSDK Platforms\u201d tab, and then check the box for \u201cShow Package Details\u201d. Now expand the \u201cAndroid 10 (Q)\u201d section, and make sure the following subsections are checked:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Android SDK Platform 29")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Intel x86 Atom_64 System Image")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Google APIs Intel x86 Atom System Image"))),(0,i.kt)("p",null,"Next, select the \u201cSDK Tools\u201d tab, and check the box for \u201cShow Package Details\u201d. Expand the \u201cAndroid SDK Build-Tools\u201d section, and make sure that the \u201c29.0.2\u201d subsection is checked."),(0,i.kt)("p",null,"To finish the SDK Manager step, click \u201cApply\u201d to download and install everything you\u2019ve selected."),(0,i.kt)("h4",{id:"enable-android-cli-commands"},"Enable Android CLI commands"),(0,i.kt)("p",null,"You\u2019ll need to append the following lines to your ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_profile")," (or desired shell configuration file) in order for React Native to be able to build your Android project."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"export ANDROID_HOME=$HOME/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/emulator\nexport PATH=$PATH:$ANDROID_HOME/tools\nexport PATH=$PATH:$ANDROID_HOME/tools/bin\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\n")),(0,i.kt)("p",null,"Now either close and reopen your terminal window or re-source your shell configuration file in order to run the new commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"source ~/.bash_profile\n")),(0,i.kt)("h3",{id:"arcanist"},"Arcanist"),(0,i.kt)("p",null,"We use Phabricator for code review. To upload a \u201cdiff\u201d to Phabricator, you\u2019ll need to use a tool called ",(0,i.kt)("a",{parentName:"p",href:"https://secure.phabricator.com/book/phabricator/article/arcanist/"},"Arcanist"),"."),(0,i.kt)("p",null,"To install Arcanist, we\u2019ll need to clone its Git repository. Pick a place in your filesystem to store it, and then run this command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git clone https://github.com/phacility/arcanist.git\n")),(0,i.kt)("p",null,"Next, you\u2019ll need to add the path ",(0,i.kt)("inlineCode",{parentName:"p"},"./arcanist/bin")," to your ",(0,i.kt)("inlineCode",{parentName:"p"},"$PATH")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_profile")," (or desired shell configuration file):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"export PATH=$PATH:~/src/arcanist/bin\n")),(0,i.kt)("p",null,"Make sure to replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"~/src")," portion of the above with the location of the directory you installed Arcanist in."),(0,i.kt)("h2",{id:"docker"},"Docker"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/"},"Docker")," is the containerization platform that we will be using to package applications. "),(0,i.kt)("p",null,"We'll install Docker via Homebrew. This guide will detail the steps taken for Docker engine installation. Feel free to use Docker Desktop in conjunction. "),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We'll need at minimum 20GB disk space for bare bones installation, with at least 50GBs for ",(0,i.kt)("inlineCode",{parentName:"p"},":auto")," (50:50 split between base image and runtime image)."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install docker; brew upgrade docker \n")),(0,i.kt)("p",null,"We're also going to need to install docker-machine and virtualbox, which Docker uses to run correctly on macOS.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install docker-machine; brew upgrade docker-machine\n")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"VirtualBox is not officially supported yet on MacOS Monterey (or even High Sierra for that matter). Consider setting up Docker last, until we can update the docs better.  "))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},'You\'ll be prompted for password from Terminal, and likely receive a warning that "macOS blocked the install". If the installation fails, retry after you enable it in:\nSystem Preferences \u2192 Security & Privacy \u2192 General'),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"This ",(0,i.kt)("a",{parentName:"li",href:"https://developer.apple.com/library/content/technotes/tn2459/_index.html"},"Apple Technical Note")," provides more context. ")))),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("h3",{id:"apache"},"Apache"),(0,i.kt)("p",null,"In both dev and prod environments we have Node configured to run on port 3000, with Apache proxying it across to port 80. The reason for Apache is so that we can use other tech stacks alongside Node. In particular, we\u2019ve been using a MySQL administration web frontend called PHPMyAdmin."),(0,i.kt)("p",null,"macOS comes with an Apache installation built in. We just need to configure it a little bit."),(0,i.kt)("p",null,"First, we\u2019ll edit the main Apache configuration file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo vim /private/etc/apache2/httpd.conf\n")),(0,i.kt)("p",null,"The following individual lines each need to be uncommented:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"LoadModule proxy_module libexec/apache2/mod_proxy.so\nLoadModule proxy_http_module libexec/apache2/mod_proxy_http.so\nLoadModule proxy_wstunnel_module libexec/apache2/mod_proxy_wstunnel.so\nLoadModule userdir_module libexec/apache2/mod_userdir.so\nLoadModule php7_module libexec/apache2/libphp7.so\nInclude /private/etc/apache2/extra/httpd-userdir.conf\n")),(0,i.kt)("p",null,"Next, we\u2019ll edit the ",(0,i.kt)("inlineCode",{parentName:"p"},"http-userdir.conf")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo vim /private/etc/apache2/extra/httpd-userdir.conf\n")),(0,i.kt)("p",null,"The following line needs to be uncommented:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Include /private/etc/apache2/users/*.conf\n")),(0,i.kt)("p",null,"Now for the main course. We need to set up a configuration file for the current user."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo vim /private/etc/apache2/users/$USER.conf\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<Directory "/Users/ashoat/Sites/">\n  AllowOverride All\n  Options Indexes FollowSymLinks\n  Require all granted\n</Directory>\n\n<VirtualHost *:80>\n  ProxyRequests on\n  ProxyPass /comm/ws ws://localhost:3000/ws\n  ProxyPass /comm/ http://localhost:3000/\n  ProxyPass /commlanding/ http://localhost:3000/commlanding/\n\n  RequestHeader set "X-Forwarded-Proto" expr=%{REQUEST_SCHEME}\n  RequestHeader set "X-Forwarded-SSL" expr=%{HTTPS}\n</VirtualHost>\n')),(0,i.kt)("p",null,"Make sure to replace \u201cashoat\u201d on the first line above with your macOS user."),(0,i.kt)("p",null,"You\u2019ll also want to make sure that Apache can read your new file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo chmod 644 /private/etc/apache2/users/$USER.conf\n")),(0,i.kt)("p",null,"Finally, let\u2019s restart Apache so it picks up the changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo apachectl restart\n")),(0,i.kt)("h3",{id:"mysql-1"},"MySQL"),(0,i.kt)("p",null,"Next we\u2019ll set up a MySQL user and a fresh database. We\u2019ll start by opening up a MySQL console."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mysql -u root -p\n")),(0,i.kt)("p",null,"Type in the MySQL root password you set up previously when prompted. Then, we\u2019ll go ahead and create an empty database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"CREATE DATABASE comm;\n")),(0,i.kt)("p",null,"Now we need to create a user that can access this database. For the following command, replace \u201cpassword\u201d with a unique password."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"CREATE USER comm@localhost IDENTIFIED BY 'password';\n")),(0,i.kt)("p",null,"Finally, we will give permissions to this user to access this database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"GRANT ALL ON comm.* TO comm@localhost;\n")),(0,i.kt)("p",null,"You can now exit the MySQL console using Ctrl+D."),(0,i.kt)("h3",{id:"phpmyadmin"},"PHPMyAdmin"),(0,i.kt)("p",null,"Next we\u2019ll set up PHPMyAdmin. If you\u2019re familiar with an alternative MySQL administration frontend you can feel free to use it instead."),(0,i.kt)("p",null,"Start by downloading the latest PHPMyAdmin release from their ",(0,i.kt)("a",{parentName:"p",href:"https://www.phpmyadmin.net/"},"website"),". In the following steps, make sure to replace the version number with the one you downloaded. We\u2019ll begin by unzipping the download."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"unzip phpMyAdmin-5.0.1-all-languages.zip\n")),(0,i.kt)("p",null,"In our Apache configuration above, we set Apache to handle everything in ",(0,i.kt)("inlineCode",{parentName:"p"},"~/Sites"),", so we\u2019ll go ahead and move PHPMyAdmin over there."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mkdir -p ~/Sites\ncd ~/Downloads\nmv phpMyAdmin-5.0.1-all-languages ~/Sites/phpmyadmin\n")),(0,i.kt)("p",null,"We also need to create a \u201cTempDir\u201d for PHPMyAdmin."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pushd ~/Sites/phpmyadmin\nmkdir tmp\nchmod 777 tmp\npopd\n")),(0,i.kt)("p",null,"Next we\u2019ll go through the PHPMyAdmin setup UI. Navigate to http://localhost/~youruser/phpmyadmin/setup/, making sure to replace \u201cyouruser\u201d with your macOS username."),(0,i.kt)("p",null,"If there are any servers listed, go ahead and delete them. Next, select the option to add a new server. Fill out the \u201cverbose name\u201d under \u201cBasic Settings\u201d, and then make sure to set \u201c127.0.0.1\u201d as the hostname. For some reason, \u201clocalhost\u201d will not work."),(0,i.kt)("p",null,"Then tab over to \u201cAuthentication\u201d. Select the \u201cconfig\u201d option under \u201cAuthentication type\u201d, and then enter in the MySQL user and password that you created in the previous step. Now hit \u201cApply\u201d."),(0,i.kt)("p",null,"You should now be back on the Overview page. Hit \u201cDownload\u201d to download the new ",(0,i.kt)("inlineCode",{parentName:"p"},"config.inc.php")," file, and then move it into the ",(0,i.kt)("inlineCode",{parentName:"p"},"~/Sites/phpmyadmin")," folder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mv config.inc.php ~/Sites/phpmyadmin/\n")),(0,i.kt)("p",null,"You should now be able to access PHPMyAdmin without needing to log in. Try navigating to http://localhost/~youruser/phpmyadmin/, making sure to replace \u201cyouruser\u201d with your macOS username."),(0,i.kt)("p",null,"Our final step will be to configure PHP to be able to handle large files, in case you find yourself needing to deal with a database backup. PHP is configured by a ",(0,i.kt)("inlineCode",{parentName:"p"},"php.ini")," file. First, check if you have one in ",(0,i.kt)("inlineCode",{parentName:"p"},"/private/etc/php.ini"),". If you don\u2019t, copy over the default:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cp /private/etc/php.ini.default /private/etc/php.ini\n")),(0,i.kt)("p",null,"We just need to update three settings: ",(0,i.kt)("inlineCode",{parentName:"p"},"memory_limit"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"post_max_size"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"upload_max_filesize"),". All should be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"256M"),"."),(0,i.kt)("h3",{id:"android-emulator"},"Android emulator"),(0,i.kt)("p",null,"In order to test the Android app on your computer you\u2019ll need to set up an Android emulator. To do this we\u2019ll need to open up the AVD Manager in Android Studio. AVD stands for \u201cAndroid Virtual Device\u201d. You can access the AVD Manager from the \u201cWelcome to Android Studio\u201d screen that pops up when you first open the application, under \u201cConfigure\u201d. If you already have a project open, you can access it from Tools \u2192 AVD Manager."),(0,i.kt)("p",null,"With the the AVD Manager open, select \u201cCreate Virtual Device\u201d on the bottom row. Feel free to select any \u201cdevice definition\u201d that includes Play Store support."),(0,i.kt)("p",null,"On the next screen you\u2019ll be asked to select a system image. Go for the latest version of Android that has been released. That\u2019s currently Android 10, also known as Android Q."),(0,i.kt)("p",null,"From there you can just hit Next and then Finish. You should then be able to start your new AVD from the AVD Manager."),(0,i.kt)("h2",{id:"git-repo"},"Git repo"),(0,i.kt)("h3",{id:"clone-from-github"},"Clone from GitHub"),(0,i.kt)("p",null,"Finally! It\u2019s time to clone the repo from GitHub."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git clone git@github.com:CommE2E/comm.git\n")),(0,i.kt)("p",null,"Once you have the repo cloned, you can run this command to pull in dependencies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd comm\nyarn cleaninstall\n")),(0,i.kt)("h3",{id:"urls"},"URLs"),(0,i.kt)("p",null,"The server needs to know some info about paths in order to properly construct URLs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mkdir -p server/facts\nvim server/facts/url.json\n")),(0,i.kt)("p",null,"Your ",(0,i.kt)("inlineCode",{parentName:"p"},"url.json")," file should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "baseRoutePath": "/"\n}\n')),(0,i.kt)("p",null,"Next, we\u2019ll create a file for constructing URLs for the main app."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"vim server/facts/app_url.json\n")),(0,i.kt)("p",null,"Your ",(0,i.kt)("inlineCode",{parentName:"p"},"app_url.json")," file should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "baseDomain": "http://localhost",\n  "basePath": "/comm/",\n  "https": false\n}\n')),(0,i.kt)("p",null,"Finally, we\u2019ll create a file for the URLs in the landing page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"vim server/facts/landing_url.json\n")),(0,i.kt)("p",null,"Your ",(0,i.kt)("inlineCode",{parentName:"p"},"landing_url.json")," file should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "baseDomain": "http://localhost",\n  "basePath": "/commlanding/",\n  "baseRoutePath": "/commlanding/",\n  "https": false\n}\n')),(0,i.kt)("h3",{id:"mysql-2"},"MySQL"),(0,i.kt)("p",null,"The server side needs to see some config files before things can work. The first is a config file with MySQL details."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd server\nmkdir secrets\nvim secrets/db_config.json\n")),(0,i.kt)("p",null,"The DB config file should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "host": "localhost",\n  "user": "comm",\n  "password": "password",\n  "database": "comm"\n}\n')),(0,i.kt)("p",null,"Make sure to replace the password with the one you set up for your ",(0,i.kt)("inlineCode",{parentName:"p"},"comm")," MySQL user earlier."),(0,i.kt)("p",null,"New let\u2019s run a script to setup the database. Before we can run the script, we\u2019ll have to use Babel to transpile our source files into something Node can interpret. Babel will transpile the files in ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," into a new directory called ",(0,i.kt)("inlineCode",{parentName:"p"},"dist"),". We also use ",(0,i.kt)("inlineCode",{parentName:"p"},"rsync")," to copy over files that don\u2019t need transpilation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn babel-build\nyarn rsync\nyarn script dist/scripts/create-db.js\n")),(0,i.kt)("h3",{id:"phabricator"},"Phabricator"),(0,i.kt)("p",null,"The last configuration step is to set up an account on Phabricator, where we handle code review. Start by ",(0,i.kt)("a",{parentName:"p",href:"https://phabricator.ashoat.com"},"logging in to Phabricator")," using your GitHub account."),(0,i.kt)("p",null,"Next, make sure you\u2019re inside the directory containing the Comm Git repository, and run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"arc install-certificate\n")),(0,i.kt)("p",null,"This command will help you connect your Phabricator account with the local Arcanist instance, allowing you to run ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"arc land")," commands."),(0,i.kt)("h2",{id:"development"},"Development"),(0,i.kt)("h3",{id:"flow-typechecker"},"Flow typechecker"),(0,i.kt)("p",null,"It\u2019s good to run the ",(0,i.kt)("inlineCode",{parentName:"p"},"flow")," typechecker frequently to make sure you\u2019re not introducing any type errors. Flow treats each Yarn Workspace as a separate environment, and as such runs a separate type-checking server for each. This server is started when you first run ",(0,i.kt)("inlineCode",{parentName:"p"},"node_modules/.bin/flow")," in each of the four Yarn Workspace folders."),(0,i.kt)("p",null,"To make sure Flow runs from the command-line, you can edit your ",(0,i.kt)("inlineCode",{parentName:"p"},"$PATH")," environmental variable in your ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_profile")," file (or desired shell configuration file) to always include ",(0,i.kt)("inlineCode",{parentName:"p"},"./node_modules/.bin"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"export PATH=$PATH:./node_modules/.bin\n")),(0,i.kt)("p",null,"As always, make sure you reload the ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_profile")," after editing it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"source ~/.bash_profile\n")),(0,i.kt)("p",null,"You should now be able to run ",(0,i.kt)("inlineCode",{parentName:"p"},"flow")," in any of the Yarn workspaces:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd lib\nflow\n")),(0,i.kt)("h3",{id:"running-web-app"},"Running web app"),(0,i.kt)("p",null,"Open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd web\nyarn dev\n")),(0,i.kt)("p",null,"This will start two processes. One is ",(0,i.kt)("inlineCode",{parentName:"p"},"webpack-dev-server"),", which will serve the JS files. ",(0,i.kt)("inlineCode",{parentName:"p"},"webpack-dev-server")," also makes sure the website automatically hot-reloads whenever any of the source files change. The other process is ",(0,i.kt)("inlineCode",{parentName:"p"},"webpack --watch"),", which will build the ",(0,i.kt)("inlineCode",{parentName:"p"},"app.build.cjs")," file, as well as rebuilding it whenever any of the source files change. The ",(0,i.kt)("inlineCode",{parentName:"p"},"app.build.cjs")," file is consumed by the Node server in order to pre-render the initial HTML from the web source (\u201cServer-Side Rendering\u201d)."),(0,i.kt)("h3",{id:"running-landing-page"},"Running landing page"),(0,i.kt)("p",null,"Open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd landing\nyarn dev\n")),(0,i.kt)("p",null,"This runs the same two processes as the web app, but for the landing page. Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"landing.build.cjs")," file (similar to the web app\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"app.build.cjs")," file) is consumed by the Node server."),(0,i.kt)("h3",{id:"running-server"},"Running server"),(0,i.kt)("p",null,"Open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd server\nyarn dev\n")),(0,i.kt)("p",null,"You should now be able to load the web app in your web browser at http://localhost/comm/, and the landing page at http://localhost/commlanding/."),(0,i.kt)("p",null,"This command runs three processes. The first two are to keep the ",(0,i.kt)("inlineCode",{parentName:"p"},"dist")," folder updated whenever the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," folder changes. They are \u201cwatch\u201d versions of the same Babel and ",(0,i.kt)("inlineCode",{parentName:"p"},"rsync")," commands we used to initially create the ",(0,i.kt)("inlineCode",{parentName:"p"},"dist")," folder (before running the ",(0,i.kt)("inlineCode",{parentName:"p"},"create-db.js")," script above). The final process is ",(0,i.kt)("inlineCode",{parentName:"p"},"nodemon"),", which is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," except that it restarts whenever any of its source files (in the ",(0,i.kt)("inlineCode",{parentName:"p"},"dist")," directory) changes."),(0,i.kt)("p",null,"Note that if you run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn dev")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," right after ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn cleaninstall"),", before Webpack is given a chance to build ",(0,i.kt)("inlineCode",{parentName:"p"},"app.build.cjs"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"landing.build.cjs")," files, then Node will crash when it attempts to import those files. Just make sure to run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn dev")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn prod"),") in ",(0,i.kt)("inlineCode",{parentName:"p"},"web")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"landing")," before attempting to load the corresponding webpages."),(0,i.kt)("h3",{id:"running-ios"},"Running iOS"),(0,i.kt)("p",null,"First, make sure that the React Native packager is open. If you haven\u2019t already, open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd native\nyarn dev\n")),(0,i.kt)("p",null,"This command runs two processes. The first is the Metro bundler, which handles bundling our app\u2019s JavaScript code and communicating with the debug build of the app running on either the simulator or a physical device. The second is the ",(0,i.kt)("inlineCode",{parentName:"p"},"remotedev-server")," for Redux, which is a proxy of sorts through which the Redux monitor (running in the Chrome extension) can communicate with the debug build of the app."),(0,i.kt)("p",null,"Next, open ",(0,i.kt)("inlineCode",{parentName:"p"},"native/ios/Comm.xcworkspace")," in Xcode. Select a simulator and then hit the play button to build and run the project."),(0,i.kt)("h3",{id:"running-android"},"Running Android"),(0,i.kt)("p",null,"First, make sure that the React Native packager is open. If you haven\u2019t already, open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd native\nyarn dev\n")),(0,i.kt)("p",null,"This commands runs two processes (see previous section for details)."),(0,i.kt)("p",null,"Next, boot up an Android simulator using Android Studio\u2019s AVD Manager. You should have a single Android simulator (or plugged-in device) running at one time."),(0,i.kt)("p",null,"Finally, use this command to build and run the Android app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd native\nyarn react-native run-android\n")),(0,i.kt)("h3",{id:"codegen"},"Codegen"),(0,i.kt)("p",null,"We use a couple of tools that automatically generate code. There is always a source of truth \u2013 usually some file(s) with schemas."),(0,i.kt)("h4",{id:"codegen-for-jsi"},"Codegen for JSI"),(0,i.kt)("p",null,"JSI is a framework in React Native that allows C++ and JS to communicate synchronously and directly. The codegen for JSI takes a Flow schema and generates C++ files that enable communication between JS and C++ in ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," apps."),(0,i.kt)("p",null,"The script to generate this code is written in JavaScript and is included as a npm package so no additional software is needed to use it. The schema has to be defined in Flow as an interface, and that interface must inherit from react-native's ",(0,i.kt)("inlineCode",{parentName:"p"},"TurboModule")," interface."),(0,i.kt)("p",null,"To run the JSI codegen, just run ",(0,i.kt)("inlineCode",{parentName:"p"},"cd native && yarn codegen-jsi"),". The input Flow schemas are located in ",(0,i.kt)("inlineCode",{parentName:"p"},"native/schema"),"."),(0,i.kt)("h4",{id:"codegen-for-grpc"},"Codegen for gRPC"),(0,i.kt)("p",null,"gRPC is a framework from Google for writing services. As a developer, you define your service's API using Protobufs, and gRPC handles the networking and basic infrastructure for you."),(0,i.kt)("p",null,"The codegen for gRPC takes files written in the ",(0,i.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/docs/proto3"},"proto language")," as input and outputs C++ code that enables a developer to create a client and a server that use gRPC for communication."),(0,i.kt)("p",null,"Because of C++ build dependencies, this could not be bundled as an npm package. ",(0,i.kt)("inlineCode",{parentName:"p"},"brew")," also fails to install the required version so if you want to generate files in your local environment, you have to manually install protobuf."),(0,i.kt)("p",null,"If you find yourself needing to modify the Protobuf schema files, you'll need to set up the tools to run the codegen. Follow the steps below:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"brew install autoconf automake libtool curl make g++ unzip")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"wget https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protobuf-cpp-3.15.8.tar.gz")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tar xfzv protobuf-cpp-3.15.8.tar.gz")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cd protobuf-3.15.8")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./configure")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"make")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"make check")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"make install"))),(0,i.kt)("p",null,"After installing, you should be able to check the version of Protobuf like this: ",(0,i.kt)("inlineCode",{parentName:"p"},"protoc --version")),(0,i.kt)("p",null,"After installing Protobuf, you will also need to install gRPC using ",(0,i.kt)("inlineCode",{parentName:"p"},"brew install grpc"),". This will install the ",(0,i.kt)("inlineCode",{parentName:"p"},"grpc_cpp_plugin")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"protoc")," (the Protobuf compiler), which is necessary for compiling gRPC schemas."),(0,i.kt)("p",null,"Please note that the order is crucial here - you have to first install Protobuf and only then gRPC. This is because otherwise gRPC will install Protobuf automatically from its dependency list, but the version of Protobuf will be incorrect."),(0,i.kt)("h2",{id:"debugging"},"Debugging"),(0,i.kt)("h3",{id:"react-developer-tools"},"React Developer Tools"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For web, you can access the React Developer Tools through the Chrome extension by opening the Chrome Developer Tools and selecting the \u201cComponents\u201d or \u201cProfiler\u201d tabs. This should work in both our development environment and in production."),(0,i.kt)("li",{parentName:"ul"},"For iOS and Android, you can access the React Developer Tools through Flipper. First start a debug build of a React Native app. Next, just open up Flipper and you should be able to see an option for \u201cReact DevTools\u201d. Flipper communicates with the app through the Metro bundler that gets started when you run ",(0,i.kt)("inlineCode",{parentName:"li"},"cd native && yarn dev"),".")),(0,i.kt)("h3",{id:"redux-developer-tools"},"Redux Developer Tools"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For web, you can access the Redux Developer Tools through the Chrome extension by opening the Chrome Developer Tools and selecting the \u201cRedux\u201d tab. This should work in both our development environment and in production, although in production you won\u2019t be able to see Redux actions from before you opened up the Redux dev tools."),(0,i.kt)("li",{parentName:"ul"},"For iOS and Android, you can access the Redux Developer Tools through the Chrome extension\u2019s Remote DevTools functionality. First, to open the Remote DevTools, right click on any webpage, go into the \u201cRedux DevTools\u201d menu, and select \u201cOpen Remote DevTools\u201d. Then hit \u201cSettings\u201d, select \u201cUse custom (local) server\u201d, and configure it to connect to ",(0,i.kt)("inlineCode",{parentName:"li"},"localhost")," on port 8043. This will connect to the ",(0,i.kt)("inlineCode",{parentName:"li"},"remotedev-server")," instance that you started when you ran ",(0,i.kt)("inlineCode",{parentName:"li"},"cd native && yarn dev"),".")),(0,i.kt)("h3",{id:"debugging-javascript"},"Debugging JavaScript"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For web, you can just use your browser of choice\u2019s dev tools."),(0,i.kt)("li",{parentName:"ul"},"For iOS and Android, you should use Flipper. First start a debug build of a React Native app. Next, just open up Flipper and you should be able to see an option for \u201cHermes Debugger (RN)\u201d. Flipper communicates with the app through the Metro bundler that gets started when you run ",(0,i.kt)("inlineCode",{parentName:"li"},"cd native && yarn dev"),".")),(0,i.kt)("h2",{id:"working-with-phabricator"},"Working with Phabricator"),(0,i.kt)("h3",{id:"creating-a-new-diff"},"Creating a new diff"),(0,i.kt)("p",null,"The biggest difference between GitHub\u2019s PR workflow and Phabricator\u2019s \u201cdiff\u201d workflow is that Phabricator lets you create a diff from any commit, or set of commits. In contrast, GitHub can only create PRs from branches."),(0,i.kt)("p",null,"When you have a commit ready and want to submit a diff for code review, just run ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff")," from within the Comm Git repo. Arcanist will attempt to determine the \u201cbase\u201d for your diff automatically, but by default it will take the single most recent commit. You can see what base Arcanist thinks it should use by running ",(0,i.kt)("inlineCode",{parentName:"p"},"arc which"),". You can also explicitly specify a base by using ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff --base"),". For instance, ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff --base HEAD^")," will create a diff from the most recent commit, which should be the default behavior."),(0,i.kt)("p",null,"Keep in mind that ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff")," always diffs the base against your current working copy. Though this nominally includes any unstashed changes you might have, ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff"),"\u2019s interactive prompts will help you exclude unrelated changes in your working copy."),(0,i.kt)("p",null,"It\u2019s generally easiest to keep a 1:1 correspondence between diffs and commits. If you\u2019re working with a stack of commits, you can use Git\u2019s interactive rebase feature (",(0,i.kt)("inlineCode",{parentName:"p"},"git rebase -i"),") to run ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff")," on each commit individually."),(0,i.kt)("h3",{id:"updating-a-diff"},"Updating a diff"),(0,i.kt)("p",null,"Whereas with GitHub PRs, updates are usually created by adding on more commits, in Phabricator the easiest way to update a diff is by amending the existing commit."),(0,i.kt)("p",null,"When you run ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff")," on a commit for the first time, it amends the commit message to include a link to the Phabricator diff. If and when you want to update that diff, just run ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff")," again."),(0,i.kt)("p",null,"If you\u2019re working with a stack of diffs, and want to update an earlier diff, you can use Git\u2019s interactive rebase feature (",(0,i.kt)("inlineCode",{parentName:"p"},"git rebase -i"),") to open the stack to a particular point. Then you can amend that commit and run ",(0,i.kt)("inlineCode",{parentName:"p"},"arc diff")," before continuing the rebase."),(0,i.kt)("h3",{id:"committing-a-diff"},"Committing a diff"),(0,i.kt)("p",null,"After your diff has been accepted, you should be able to land it. To land a diff just run ",(0,i.kt)("inlineCode",{parentName:"p"},"arc land")," from within the repository."),(0,i.kt)("p",null,"If you\u2019re dealing with a stack, ",(0,i.kt)("inlineCode",{parentName:"p"},"arc land")," will make sure to only land the diffs that have been accepted, and shouldn\u2019t land any diffs that depend on other diffs that haven\u2019t been accepted yet."),(0,i.kt)("p",null,"Note that you need commit rights to the repository in order to run ",(0,i.kt)("inlineCode",{parentName:"p"},"arc land"),". If you don\u2019t have commit rights, reach out to @ashoat for assistance."),(0,i.kt)("h3",{id:"creating-a-herald-rule"},"Creating a Herald rule"),(0,i.kt)("p",null,"Once you have access to Phabricator, you may want to set up a Herald rule so that you get CC\u2019d on any new diffs. The way to do that in Phabricator is:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Go to \u201cMore Applications\u201d on the left-hand sidebar."),(0,i.kt)("li",{parentName:"ol"},"Select \u201cHerald\u201d from the list."),(0,i.kt)("li",{parentName:"ol"},"Press the \u201cCreate Herald Rule\u201d button in the upper-right corner of the screen."),(0,i.kt)("li",{parentName:"ol"},"Select \u201cDifferential Revisions\u201d from the list."),(0,i.kt)("li",{parentName:"ol"},"Select \u201cPersonal Rule\u201d from the list."),(0,i.kt)("li",{parentName:"ol"},"Set up your new rule to match ",(0,i.kt)("a",{parentName:"li",href:"https://phabricator.ashoat.com/H2"},"this one"),".")),(0,i.kt)("h3",{id:"final-notes"},"Final notes"),(0,i.kt)("p",null,"When developing, I usually just pop up three terminal windows, one for ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn dev")," in each of server, web, and native."),(0,i.kt)("p",null,"Note that it\u2019s currently only possible to create a user account using the iOS or Android apps. The website supports logging in, but does not support account creation."),(0,i.kt)("p",null,"Good luck, and let @ashoat know if you have any questions!"))}c.isMDXComponent=!0}}]);